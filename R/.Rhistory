data$HF_cor5[x:y] <- NA
as.vector(data$HF_cor5)
}
HF_cor5 <- as.data.frame(mapply(FUN, start, end, SIMPLIFY = T)) %>%
mutate(ID = data$ID, Zeit = data$Zeit)
HF_cor5 <- HF_cor5 %>% filter(rowSums(across(everything(), ~is.na(.x)))>0) %>%
select(ID, Zeit) %>% mutate(HFNA = "short")
data <- left_join(data, HF_cor5)
data$HF_cor5[data$HFNA == "short"] <- NA
data$HFNA <- NULL
HR_seqs <- data$HF_cor5
HR_seqs <- !is.na(HR_seqs)
runs <- rle(HR_seqs)
runs <- as.data.frame(unclass(runs))
}
FUN <- function(x) {
replicate(runs$lengths[x], x)
}
b <- length(runs$lengths)
x <- 1:b
list <- sapply(x, FUN)
vec <- unlist(list)
data <- data %>% mutate(HRGroup = vec)
data_withoutNA <- data %>% filter(!is.na(HF_cor5))
# Filter HF (windowsize = 29, p = 3)
if(!require("signal")) install.packages("signal")
library(signal)
if(sum(data_withoutNA$HF_cor5) == 0) {
data_withoutNA$HF_gefiltert <- NA
} else {
data_withoutNA <- data_withoutNA %>% group_by(ID, Datum, HRGroup) %>% nest()
data_withoutNA <- data_withoutNA %>%
mutate(HF_gefiltert = map(data, ~sgolayfilt(.x$HF_cor5, p = 3, n = 29)))
data_withoutNA <- unnest(data_withoutNA, cols = c(data, HF_gefiltert))
data <- left_join(data, data_withoutNA)
}
data <- data %>% select(-HRGroup, -HF_cor5)
detach("package:signal")
View(data)
# ----------------------------------------------------------------------------
# Remove small (< 9) sequences of NA values in HF
V_seqs <- as.data.frame(cbind(data$ID, as.character(data$Datum),
!is.na(data$V_LOCF), !is.na(data$V_LOCF)))
colnames(V_seqs) <- c("ID", "Datum", "run", "values")
runs <- V_seqs %>% group_by(run = data.table::rleid(ID, Datum, run), ID, Datum) %>%
summarise(values = first(values), lengths = n())
if (any(runs$lengths[runs$values == TRUE] < 9)) {
runs <- runs %>% mutate(end = cumsum(lengths))
runs <- runs %>% mutate(start = end-lengths+1)
short <- runs %>% filter(lengths < 9 & values == TRUE)
start <- short$start
end <- short$end
FUN <- function(x,y) {
data$V_LOCF[x:y] <- NA
as.vector(data$V_LOCF)
}
V_LOCF <- as.data.frame(mapply(FUN, start, end, SIMPLIFY = T)) %>%
mutate(ID = data$ID, Zeit = data$Zeit)
V_LOCF <- V_LOCF %>% filter(rowSums(across(everything(), ~is.na(.x)))>0) %>%
select(ID, Zeit) %>% mutate(VNA = "short")
data <- left_join(data, V_LOCF)
data$V_LOCF[data$VNA == "short"] <- NA
data$VNA <- NULL
V_seqs <- data$V_LOCF
V_seqs <- !is.na(V_seqs)
runs <- rle(V_seqs)
runs <- as.data.frame(unclass(runs))
}
FUN <- function(x) {
replicate(runs$lengths[x], x)
}
b <- length(runs$lengths)
x <- 1:b
list <- sapply(x, FUN)
vec <- unlist(list)
data <- data %>% mutate(VGroup = vec)
data_withoutNA <- data %>% filter(!is.na(V_LOCF))
data_withoutNA <- data_withoutNA %>% group_by(ID, VGroup) %>% nest()
horse_filter_multiple <- function(data) {
data <- data %>% mutate(Datum = as.Date(Zeit))
data <- data %>% mutate(HF = ifelse(HF == 0, NA, HF)) # remove zeros in HF
data <- data %>% group_by(ID, Datum) %>% nest() # nest data frame by ID and date
data <- data %>% # Close small gaps (max 10) in HF by LOCF
mutate(HF_LOCF = map(data, ~na.locf(.x$HF, na.rm = FALSE,
fromLast = FALSE, maxgap = 10)))
data <- data %>% # Close small gaps (max 10) in V by LOCF
mutate(V_LOCF = map(data, ~na.locf(.x$V, na.rm = FALSE,
fromLast = FALSE, maxgap = 10)))
data <- unnest(data, cols = c(data, HF_LOCF, V_LOCF))
data <- data %>% group_by(ID, Datum) %>% nest() # nest data frame by ID and date
data <- data %>% #Calculate rolling average of HF (window size = 9)
mutate(HF_mean9 = map(data, ~as.numeric(slide(.x$HF_LOCF, mean,
.before = 4, .after = 4))))
data <- unnest(data, cols = c(data, HF_mean9))
data <- data %>% # Replace HF with moving average when diff > 5
mutate(HF_cor5 = ifelse(abs(HF_LOCF - HF_mean9) > 5, HF_mean9, HF_LOCF))
data <- ungroup(data)
data <- data %>% select(-HF_LOCF, -HF_mean9)
# ----------------------------------------------------------------------------
# Remove small (< 29) sequences of NA values in HF
HR_seqs <- as.data.frame(cbind(data$ID, as.character(data$Datum),
!is.na(data$HF_cor5), !is.na(data$HF_cor5)))
colnames(HR_seqs) <- c("ID", "Datum", "run", "values")
runs <- HR_seqs %>% group_by(run = data.table::rleid(ID, Datum, run), ID, Datum) %>%
summarise(values = first(values), lengths = n())
if (any(runs$lengths[runs$values == TRUE] < 29)) {
end <- cumsum(runs$lengths)
runs$end <- end
runs <- runs %>% mutate(start = end-lengths+1)
short <- runs %>% filter(lengths < 29 & values == TRUE)
start <- short$start
end <- short$end
FUN <- function(x,y) {
data$HF_cor5[x:y] <- NA
as.vector(data$HF_cor5)
}
HF_cor5 <- as.data.frame(mapply(FUN, start, end, SIMPLIFY = T)) %>%
mutate(ID = data$ID, Zeit = data$Zeit)
HF_cor5 <- HF_cor5 %>% filter(rowSums(across(everything(), ~is.na(.x)))>0) %>%
select(ID, Zeit) %>% mutate(HFNA = "short")
data <- left_join(data, HF_cor5)
data$HF_cor5[data$HFNA == "short"] <- NA
data$HFNA <- NULL
HR_seqs <- data$HF_cor5
HR_seqs <- !is.na(HR_seqs)
runs <- rle(HR_seqs)
runs <- as.data.frame(unclass(runs))
}
FUN <- function(x) {
replicate(runs$lengths[x], x)
}
b <- length(runs$lengths)
x <- 1:b
list <- sapply(x, FUN)
vec <- unlist(list)
data <- data %>% mutate(HRGroup = vec)
data_withoutNA <- data %>% filter(!is.na(HF_cor5))
# ----------------------------------------------------------------------------
# Filter HF (windowsize = 29, p = 3)
if(!require("signal")) install.packages("signal")
library(signal)
if(sum(data_withoutNA$HF_cor5) == 0) {
data_withoutNA$HF_gefiltert <- NA
} else {
data_withoutNA <- data_withoutNA %>% group_by(ID, Datum, HRGroup) %>% nest()
data_withoutNA <- data_withoutNA %>%
mutate(HF_gefiltert = map(data, ~sgolayfilt(.x$HF_cor5, p = 3, n = 29)))
data_withoutNA <- unnest(data_withoutNA, cols = c(data, HF_gefiltert))
data <- left_join(data, data_withoutNA)
}
data <- data %>% select(-HRGroup, -HF_cor5)
detach("package:signal")
# ----------------------------------------------------------------------------
# Remove small (< 9) sequences of NA values in HF
V_seqs <- as.data.frame(cbind(data$ID, as.character(data$Datum),
!is.na(data$V_LOCF), !is.na(data$V_LOCF)))
colnames(V_seqs) <- c("ID", "Datum", "run", "values")
runs <- V_seqs %>% group_by(run = data.table::rleid(ID, Datum, run), ID, Datum) %>%
summarise(values = first(values), lengths = n())
if (any(runs$lengths[runs$values == TRUE] < 9)) {
runs <- runs %>% mutate(end = cumsum(lengths))
runs <- runs %>% mutate(start = end-lengths+1)
short <- runs %>% filter(lengths < 9 & values == TRUE)
start <- short$start
end <- short$end
FUN <- function(x,y) {
data$V_LOCF[x:y] <- NA
as.vector(data$V_LOCF)
}
V_LOCF <- as.data.frame(mapply(FUN, start, end, SIMPLIFY = T)) %>%
mutate(ID = data$ID, Zeit = data$Zeit)
V_LOCF <- V_LOCF %>% filter(rowSums(across(everything(), ~is.na(.x)))>0) %>%
select(ID, Zeit) %>% mutate(VNA = "short")
data <- left_join(data, V_LOCF)
data$V_LOCF[data$VNA == "short"] <- NA
data$VNA <- NULL
V_seqs <- data$V_LOCF
V_seqs <- !is.na(V_seqs)
runs <- rle(V_seqs)
runs <- as.data.frame(unclass(runs))
}
FUN <- function(x) {
replicate(runs$lengths[x], x)
}
b <- length(runs$lengths)
x <- 1:b
list <- sapply(x, FUN)
vec <- unlist(list)
data <- data %>% mutate(VGroup = vec)
data_withoutNA <- data %>% filter(!is.na(V_LOCF))
data_withoutNA <- data_withoutNA %>% group_by(ID, Datum, VGroup) %>% nest()
# ----------------------------------------------------------------------------
# Filter HF (windowsize = 9, p = 3)
if(!require("signal")) install.packages("signal")
library(signal)
data_withoutNA <- data_withoutNA %>%
mutate(V_gefiltert = map(data, ~sgolayfilt(.x$V_LOCF, p = 3, n = 9)))
data_withoutNA <- unnest(data_withoutNA, cols = c(data, V_gefiltert))
data <- left_join(data, data_withoutNA)
data <- data %>% select(-VGroup, -V_LOCF)
data <- data %>%
mutate(V_gefiltert = ifelse(V_gefiltert < 0, 0, V_gefiltert))
detach("package:signal")
data
}
data <- list.files(path = "files",
pattern = "*.xlsx", full.names = T) %>%
map_df(function(x) read_excel(x, sheet = 1, guess_max = 10000))
test <- horse_filter_multiple(data)
View(test)
library(readxl)
data <- list.files(path = "files",
pattern = "*.xlsx", full.names = T) %>%
map_df(function(x) read_excel(x, sheet = 1, guess_max = 10000))
library(tidyverse)
data <- list.files(path = "files",
pattern = "*.xlsx", full.names = T) %>%
map_df(function(x) read_excel(x, sheet = 1, guess_max = 10000))
# Calculate the distance (GPSDistance) in meter between locations from
# gps latitude (Lat) and longitude (Lon) for multiple rides in the same dataframe
# dataframe "data" has to be structured as follows:
# col "ID" with horse identifier, col "Zeit" with timestamp,
# col "Lat" with Latitude (decimal), col "Lon" with Longitude (decimal)
# dependencies: tidyverse, tsibble
horse_GPSDist <- function(data) {
data <- data %>% mutate(Datum = as.Date(Zeit))
data <- data %>% group_by(ID, Datum) %>% nest()
data <- data %>% mutate(Delta_t = map(data, ~as.numeric(difference(.x$Zeit))))
data <- data %>% mutate(Lon_first = map(data, ~first(.x$Lon)))
data <- data %>% mutate(Lat_first = map(data, ~first(.x$Lat)))
data <- unnest(data, cols = c(data, Delta_t, Lon_first, Lat_first))
data <- data %>%
mutate(x = ((Lon - Lon_first)*pi/180)*cos((Lat*pi)/180)*6371000)
data <- data %>%
mutate(y = ((Lat - Lat_first)*pi/180)*6371000)
data <- data %>% group_by(ID, Datum) %>% nest()
data <- data %>% mutate(Delta_x = map(data, ~as.numeric(difference(.x$x))))
data <- data %>% mutate(Delta_y = map(data, ~as.numeric(difference(.x$y))))
data <- unnest(data, cols = c(data, Delta_x, Delta_y))
data <- ungroup(data)
data <- data %>%
mutate(GPSDistance=ifelse(Delta_t != 0,(((Delta_x/Delta_t)^2+(Delta_y/Delta_t)^2)^0.5)*Delta_t, 0))
data <- data %>% select(-Lat_first, -Lon_first, -x, -Delta_x, -y, -Delta_y)
}
data <- horse_GPSDist(data)
library(tsibble)
data <- horse_GPSDist(data)
View(data)
horse_filter <- function(data) {
data <- data %>% mutate(Datum = as.Date(Zeit))
data <- data %>% mutate(HF = ifelse(HF == 0, NA, HF)) # remove zeros in HF
data <- data %>% group_by(ID, Datum) %>% nest() # nest data frame by ID and date
data <- data %>% # Close small gaps (max 10) in HF by LOCF
mutate(HF_LOCF = map(data, ~na.locf(.x$HF, na.rm = FALSE,
fromLast = FALSE, maxgap = 10)))
data <- data %>% # Close small gaps (max 10) in V by LOCF
mutate(V_LOCF = map(data, ~na.locf(.x$V, na.rm = FALSE,
fromLast = FALSE, maxgap = 10)))
data <- unnest(data, cols = c(data, HF_LOCF, V_LOCF))
data <- data %>% group_by(ID, Datum) %>% nest() # nest data frame by ID and date
data <- data %>% #Calculate rolling average of HF (window size = 9)
mutate(HF_mean9 = map(data, ~as.numeric(slide(.x$HF_LOCF, mean,
.before = 4, .after = 4))))
data <- unnest(data, cols = c(data, HF_mean9))
data <- data %>% # Replace HF with moving average when diff > 5
mutate(HF_cor5 = ifelse(abs(HF_LOCF - HF_mean9) > 5, HF_mean9, HF_LOCF))
data <- ungroup(data)
data <- data %>% select(-HF_LOCF, -HF_mean9)
# ----------------------------------------------------------------------------
# Remove small (< 29) sequences of NA values in HF
HR_seqs <- as.data.frame(cbind(data$ID, as.character(data$Datum),
!is.na(data$HF_cor5), !is.na(data$HF_cor5)))
colnames(HR_seqs) <- c("ID", "Datum", "run", "values")
runs <- HR_seqs %>% group_by(run = data.table::rleid(ID, Datum, run), ID, Datum) %>%
summarise(values = first(values), lengths = n())
if (any(runs$lengths[runs$values == TRUE] < 29)) {
end <- cumsum(runs$lengths)
runs$end <- end
runs <- runs %>% mutate(start = end-lengths+1)
short <- runs %>% filter(lengths < 29 & values == TRUE)
start <- short$start
end <- short$end
FUN <- function(x,y) {
data$HF_cor5[x:y] <- NA
as.vector(data$HF_cor5)
}
HF_cor5 <- as.data.frame(mapply(FUN, start, end, SIMPLIFY = T)) %>%
mutate(ID = data$ID, Zeit = data$Zeit)
HF_cor5 <- HF_cor5 %>% filter(rowSums(across(everything(), ~is.na(.x)))>0) %>%
select(ID, Zeit) %>% mutate(HFNA = "short")
data <- left_join(data, HF_cor5)
data$HF_cor5[data$HFNA == "short"] <- NA
data$HFNA <- NULL
HR_seqs <- data$HF_cor5
HR_seqs <- !is.na(HR_seqs)
runs <- rle(HR_seqs)
runs <- as.data.frame(unclass(runs))
}
FUN <- function(x) {
replicate(runs$lengths[x], x)
}
b <- length(runs$lengths)
x <- 1:b
list <- sapply(x, FUN)
vec <- unlist(list)
data <- data %>% mutate(HRGroup = vec)
data_withoutNA <- data %>% filter(!is.na(HF_cor5))
# ----------------------------------------------------------------------------
# Filter HF (windowsize = 29, p = 3)
if(!require("signal")) install.packages("signal")
library(signal)
if(sum(data_withoutNA$HF_cor5) == 0) {
data_withoutNA$HF_gefiltert <- NA
} else {
data_withoutNA <- data_withoutNA %>% group_by(ID, Datum, HRGroup) %>% nest()
data_withoutNA <- data_withoutNA %>%
mutate(HF_gefiltert = map(data, ~sgolayfilt(.x$HF_cor5, p = 3, n = 29)))
data_withoutNA <- unnest(data_withoutNA, cols = c(data, HF_gefiltert))
data <- left_join(data, data_withoutNA)
}
data <- data %>% select(-HRGroup, -HF_cor5)
detach("package:signal")
# ----------------------------------------------------------------------------
# Remove small (< 9) sequences of NA values in HF
V_seqs <- as.data.frame(cbind(data$ID, as.character(data$Datum),
!is.na(data$V_LOCF), !is.na(data$V_LOCF)))
colnames(V_seqs) <- c("ID", "Datum", "run", "values")
runs <- V_seqs %>% group_by(run = data.table::rleid(ID, Datum, run), ID, Datum) %>%
summarise(values = first(values), lengths = n())
if (any(runs$lengths[runs$values == TRUE] < 9)) {
runs <- runs %>% mutate(end = cumsum(lengths))
runs <- runs %>% mutate(start = end-lengths+1)
short <- runs %>% filter(lengths < 9 & values == TRUE)
start <- short$start
end <- short$end
FUN <- function(x,y) {
data$V_LOCF[x:y] <- NA
as.vector(data$V_LOCF)
}
V_LOCF <- as.data.frame(mapply(FUN, start, end, SIMPLIFY = T)) %>%
mutate(ID = data$ID, Zeit = data$Zeit)
V_LOCF <- V_LOCF %>% filter(rowSums(across(everything(), ~is.na(.x)))>0) %>%
select(ID, Zeit) %>% mutate(VNA = "short")
data <- left_join(data, V_LOCF)
data$V_LOCF[data$VNA == "short"] <- NA
data$VNA <- NULL
V_seqs <- data$V_LOCF
V_seqs <- !is.na(V_seqs)
runs <- rle(V_seqs)
runs <- as.data.frame(unclass(runs))
}
FUN <- function(x) {
replicate(runs$lengths[x], x)
}
b <- length(runs$lengths)
x <- 1:b
list <- sapply(x, FUN)
vec <- unlist(list)
data <- data %>% mutate(VGroup = vec)
data_withoutNA <- data %>% filter(!is.na(V_LOCF))
data_withoutNA <- data_withoutNA %>% group_by(ID, Datum, VGroup) %>% nest()
# ----------------------------------------------------------------------------
# Filter HF (windowsize = 9, p = 3)
if(!require("signal")) install.packages("signal")
library(signal)
data_withoutNA <- data_withoutNA %>%
mutate(V_gefiltert = map(data, ~sgolayfilt(.x$V_LOCF, p = 3, n = 9)))
data_withoutNA <- unnest(data_withoutNA, cols = c(data, V_gefiltert))
data <- left_join(data, data_withoutNA)
data <- data %>% select(-VGroup, -V_LOCF)
data <- data %>%
mutate(V_gefiltert = ifelse(V_gefiltert < 0, 0, V_gefiltert))
detach("package:signal")
data
}
horse_filter <- function(data) {
data <- data %>% mutate(Datum = as.Date(Zeit))
data <- data %>% mutate(HF = ifelse(HF == 0, NA, HF)) # remove zeros in HF
data <- data %>% group_by(ID, Datum) %>% nest() # nest data frame by ID and date
data <- data %>% # Close small gaps (max 10) in HF by LOCF
mutate(HF_LOCF = map(data, ~na.locf(.x$HF, na.rm = FALSE,
fromLast = FALSE, maxgap = 10)))
data <- data %>% # Close small gaps (max 10) in V by LOCF
mutate(V_LOCF = map(data, ~na.locf(.x$V, na.rm = FALSE,
fromLast = FALSE, maxgap = 10)))
data <- unnest(data, cols = c(data, HF_LOCF, V_LOCF))
data <- data %>% group_by(ID, Datum) %>% nest() # nest data frame by ID and date
data <- data %>% #Calculate rolling average of HF (window size = 9)
mutate(HF_mean9 = map(data, ~as.numeric(slide(.x$HF_LOCF, mean,
.before = 4, .after = 4))))
data <- unnest(data, cols = c(data, HF_mean9))
data <- data %>% # Replace HF with moving average when diff > 5
mutate(HF_cor5 = ifelse(abs(HF_LOCF - HF_mean9) > 5, HF_mean9, HF_LOCF))
data <- ungroup(data)
data <- data %>% select(-HF_LOCF, -HF_mean9)
# ----------------------------------------------------------------------------
# Remove small (< 29) sequences of NA values in HF
HR_seqs <- as.data.frame(cbind(data$ID, as.character(data$Datum),
!is.na(data$HF_cor5), !is.na(data$HF_cor5)))
colnames(HR_seqs) <- c("ID", "Datum", "run", "values")
runs <- HR_seqs %>% group_by(run = data.table::rleid(ID, Datum, run), ID, Datum) %>%
summarise(values = first(values), lengths = n())
if (any(runs$lengths[runs$values == TRUE] < 29)) {
end <- cumsum(runs$lengths)
runs$end <- end
runs <- runs %>% mutate(start = end-lengths+1)
short <- runs %>% filter(lengths < 29 & values == TRUE)
start <- short$start
end <- short$end
FUN <- function(x,y) {
data$HF_cor5[x:y] <- NA
as.vector(data$HF_cor5)
}
HF_cor5 <- as.data.frame(mapply(FUN, start, end, SIMPLIFY = T)) %>%
mutate(ID = data$ID, Zeit = data$Zeit)
HF_cor5 <- HF_cor5 %>% filter(rowSums(across(everything(), ~is.na(.x)))>0) %>%
select(ID, Zeit) %>% mutate(HFNA = "short")
data <- left_join(data, HF_cor5)
data$HF_cor5[data$HFNA == "short"] <- NA
data$HFNA <- NULL
HR_seqs <- data$HF_cor5
HR_seqs <- !is.na(HR_seqs)
runs <- rle(HR_seqs)
runs <- as.data.frame(unclass(runs))
}
FUN <- function(x) {
replicate(runs$lengths[x], x)
}
b <- length(runs$lengths)
x <- 1:b
list <- sapply(x, FUN)
vec <- unlist(list)
data <- data %>% mutate(HRGroup = vec)
data_withoutNA <- data %>% filter(!is.na(HF_cor5))
# ----------------------------------------------------------------------------
# Filter HF (windowsize = 29, p = 3)
if(!require("signal")) install.packages("signal")
library(signal)
if(sum(data_withoutNA$HF_cor5) == 0) {
data_withoutNA$HF_gefiltert <- NA
} else {
data_withoutNA <- data_withoutNA %>% group_by(ID, Datum, HRGroup) %>% nest()
data_withoutNA <- data_withoutNA %>%
mutate(HF_gefiltert = map(data, ~sgolayfilt(.x$HF_cor5, p = 3, n = 29)))
data_withoutNA <- unnest(data_withoutNA, cols = c(data, HF_gefiltert))
data <- left_join(data, data_withoutNA)
}
data <- data %>% select(-HRGroup, -HF_cor5)
detach("package:signal")
# ----------------------------------------------------------------------------
# Remove small (< 9) sequences of NA values in HF
V_seqs <- as.data.frame(cbind(data$ID, as.character(data$Datum),
!is.na(data$V_LOCF), !is.na(data$V_LOCF)))
colnames(V_seqs) <- c("ID", "Datum", "run", "values")
runs <- V_seqs %>% group_by(run = data.table::rleid(ID, Datum, run), ID, Datum) %>%
summarise(values = first(values), lengths = n())
if (any(runs$lengths[runs$values == TRUE] < 9)) {
runs <- runs %>% mutate(end = cumsum(lengths))
runs <- runs %>% mutate(start = end-lengths+1)
short <- runs %>% filter(lengths < 9 & values == TRUE)
start <- short$start
end <- short$end
FUN <- function(x,y) {
data$V_LOCF[x:y] <- NA
as.vector(data$V_LOCF)
}
V_LOCF <- as.data.frame(mapply(FUN, start, end, SIMPLIFY = T)) %>%
mutate(ID = data$ID, Zeit = data$Zeit)
V_LOCF <- V_LOCF %>% filter(rowSums(across(everything(), ~is.na(.x)))>0) %>%
select(ID, Zeit) %>% mutate(VNA = "short")
data <- left_join(data, V_LOCF)
data$V_LOCF[data$VNA == "short"] <- NA
data$VNA <- NULL
V_seqs <- data$V_LOCF
V_seqs <- !is.na(V_seqs)
runs <- rle(V_seqs)
runs <- as.data.frame(unclass(runs))
}
FUN <- function(x) {
replicate(runs$lengths[x], x)
}
b <- length(runs$lengths)
x <- 1:b
list <- sapply(x, FUN)
vec <- unlist(list)
data <- data %>% mutate(VGroup = vec)
data_withoutNA <- data %>% filter(!is.na(V_LOCF))
data_withoutNA <- data_withoutNA %>% group_by(ID, Datum, VGroup) %>% nest()
# ----------------------------------------------------------------------------
# Filter HF (windowsize = 9, p = 3)
if(!require("signal")) install.packages("signal")
library(signal)
data_withoutNA <- data_withoutNA %>%
mutate(V_gefiltert = map(data, ~sgolayfilt(.x$V_LOCF, p = 3, n = 9)))
data_withoutNA <- unnest(data_withoutNA, cols = c(data, V_gefiltert))
data <- left_join(data, data_withoutNA)
data <- data %>% select(-VGroup, -V_LOCF)
data <- data %>%
mutate(V_gefiltert = ifelse(V_gefiltert < 0, 0, V_gefiltert))
detach("package:signal")
data
}
data <- horse_filter_multiple(data)
# for horse_filter
library(zoo)
library(slider)
data <- horse_filter(data)
View(data)
devtools:document()
library(devtools)
library(roxygen2)
devtools:document()
